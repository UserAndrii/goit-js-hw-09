{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAyCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,GACFF,EAAQ,CAAEH,WAAUC,UAGtBG,EAAO,CAAEJ,WAAUC,S,GAClBA,E,KAjDM,CACXQ,KAAMC,SAASC,cAAc,WAE1BF,KAAKG,iBAAiB,UAE3B,SAAuBC,GACrBA,EAAEC,iBACF,IAAMb,EAAQc,OAAOF,EAAEG,OAAOC,SAAShB,MAAMiB,OACvCC,EAAOJ,OAAOF,EAAEG,OAAOC,SAASE,KAAKD,OACrCE,EAASL,OAAOF,EAAEG,OAAOC,SAASG,OAAOF,QAKjD,SAAgCjB,EAAOkB,EAAMC,GAE3C,IADA,IAAIC,EAAapB,EACRqB,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAChCvB,EAAcuB,EAAGD,GACdE,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUyB,EAAKD,EAALvB,MACjByB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAANJ,EAAM,MAC5C,CACAK,QAAS,K,IAIdC,OAAM,SAAAP,G,IAAGxB,EAAQwB,EAARxB,SAAUyB,EAAKD,EAALvB,MAClByB,EAAA7B,GAAS8B,OAAOK,QACd,sBAAqCH,OAAf7B,EAAS,QAAY6B,OAANJ,EAAM,MAC3C,CACEK,QAAS,K,IAIjBT,GAAcF,C,EAxBhBc,CAAuBhC,EAAOkB,EAAMC,GACpCP,EAAEG,OAAOkB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\nrefs.form.addEventListener('submit', onButtonClick);\n\nfunction onButtonClick(e) {\n  e.preventDefault();\n  const delay = Number(e.target.elements.delay.value);\n  const step = Number(e.target.elements.step.value);\n  const amount = Number(e.target.elements.amount.value);\n  createMultiplePromises(delay, step, amount);\n  e.target.reset();\n}\n\nfunction createMultiplePromises(delay, step, amount) {\n  let amoutDelay = delay;\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, amoutDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          {\n            timeout: 4000,\n          }\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,\n          {\n            timeout: 4000,\n          }\n        );\n      });\n    amoutDelay += step;\n    // console.log(amoutDelay);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","addEventListener","e","preventDefault","Number","target","elements","value","step","amount","amoutDelay","i","then","param","_$delay","$parcel$interopDefault","Notify","success","concat","timeout","catch","failure","$ce04d3a99e08e73b$var$createMultiplePromises","reset"],"version":3,"file":"03-promises.4ba46531.js.map"}