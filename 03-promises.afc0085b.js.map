{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAyCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IAGtBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAC1BA,EAAM,G,EAjDA,CACXQ,KAAMC,SAASC,cAAc,WAE1BF,KAAKG,iBAAiB,UAE3B,SAAuBC,GACrBA,EAAEC,iBACF,MAAMb,EAAQc,OAAOF,EAAEG,OAAOC,SAAShB,MAAMiB,OACvCC,EAAOJ,OAAOF,EAAEG,OAAOC,SAASE,KAAKD,OACrCE,EAASL,OAAOF,EAAEG,OAAOC,SAASG,OAAOF,QAKjD,SAAgCG,EAAOF,EAAMC,GAC3C,IAAIE,EAAaD,EACjB,IAAK,IAAIE,EAAI,EAAGA,GAAKH,EAAQG,GAAK,EAChCxB,EAAcwB,EAAGD,GACdE,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBwB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqB3B,QAAiBC,MAAW,CAE/C2B,QAAS,KAEZ,IAEFC,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBwB,EAAA5B,GAAS6B,OAAOI,QACd,sBAAoB9B,QAAeC,MAAW,CAE5C2B,QAAS,KAEZ,IAELN,GAAcH,C,EAxBhBY,CAAuB9B,EAAOkB,EAAMC,GACpCP,EAAEG,OAAOgB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\nrefs.form.addEventListener('submit', onButtonClick);\n\nfunction onButtonClick(e) {\n  e.preventDefault();\n  const delay = Number(e.target.elements.delay.value);\n  const step = Number(e.target.elements.step.value);\n  const amount = Number(e.target.elements.amount.value);\n  createMultiplePromises(delay, step, amount);\n  e.target.reset();\n}\n\nfunction createMultiplePromises(delay, step, amount) {\n  let amoutDelay = delay;\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, amoutDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          {\n            timeout: 4000,\n          }\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,\n          {\n            timeout: 4000,\n          }\n        );\n      });\n    amoutDelay += step;\n    // console.log(amoutDelay);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","addEventListener","e","preventDefault","Number","target","elements","value","step","amount","delay1","amoutDelay","i","then","$parcel$interopDefault","Notify","success","timeout","catch","failure","$47d4ff9957288465$var$createMultiplePromises","reset"],"version":3,"file":"03-promises.afc0085b.js.map"}